# ┌────────────────┐
# │ LaTeX Snippets │
# └────────────────┘
#
# Special recognition for Gilles Castel. https://castel.dev/post/lecture-notes-1/

# Add math context
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal


# Snippets
snippet template "Basic Template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}

\begin{document}
	$0
\end{document}
endsnippet

snippet mtemplate "Basic Template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage{amsmath, amssymb}

\begin{document}
	$0
\end{document}
endsnippet

snippet author "Add me as author" b
\author{D.J.M. Voogsgerd}
endsnippet

snippet \today "Add the date for today" b
\date{`date +%F`}
endsnippet


snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet


snippet itemize "Itemize" bA
\begin{itemize}
	\item $1
\end{itemize}
endsnippet


# Environments
snippet begin "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

# Different Math styles
snippet mm "Math" wA
$${1:${VISUAL}}$`!p
punctuation = t[2] and t[2][0] in [',', '.', '?', '-']
if punctuation:
	if len(t[2]) == 1:
		t[2] = t[2] + (' ' if t[2][0] in [',', '.', '?'] else '')
	snip.rv='' 
else:
	snip.rv=' '
`$2
endsnippet

snippet dm "Math" wA
\[
$1
\]$0
endsnippet

# Cross product
snippet xx "cross" iA
\times 
endsnippet

# Dot product
snippet ** "cdot" iA
\cdot 
endsnippet

# Easy signs
snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

context math()
snippet iff "iff" wA
\iff
endsnippet

context math()
snippet bigo "Big O" iA
\mathcal{O}
endsnippet

# Fractions
context math()
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context math()
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context math()
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# Easy Subscript
context math()
priority 10
snippet '([A-Za-z])s(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context math()
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# Easy superscript
context math()
priority 100
snippet se "^2" iA
^2
endsnippet

context math()
priority 110
snippet "([a-zA-Z]_[a-zA-Z])se" "Square" riA
`!p
snip.rv = "{{{base}}}^{exponent}".format(base=match.group(1), exponent=2)
`
endsnippet

context math()
snippet cb "^3" iA
^3
endsnippet

#context math()
#snippet compl "complement" iA
#^{c}
#endsnippet

context math()
snippet reci "Reciprocal" iA
^{-1}
endsnippet

context math()
snippet td "superscript" iA
^{$1}$0
endsnippet

# Square roots
context math()
snippet sq "^3" iA
\sqrt{$1}$0
endsnippet

# Integrals
snippet dint "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

# Differentials
priority 100
context math()
snippet "pardif([a-zA-Z]*)(\d)([a-zA-Z]+)" "partial differential" ri
`!p
if int(match.group(2)) < 2:
	snip.rv="\\frac{{\\partial {nom}}}{{\partial {{{den}}}}}".format(nom=match.group(1), den=match.group(3), exp=match.group(2))
else:
	snip.rv="\\frac{{\\partial^{{{exp}}}{nom}}}{{\partial {{{den}}}^{{{exp}}}}}".format(nom=match.group(1), den=match.group(3), exp=match.group(2))

`
endsnippet

priority 90
context math()
snippet "dif(\\?[a-zA-Z]*)(\d)(\\?[a-zA-Z]+)" "differential" ri
`!p
if int(match.group(2)) < 2:
	snip.rv="\\frac{{d {nom}}}{{d {{{den}}}}}".format(nom=match.group(1), den=match.group(3), exp=match.group(2))
else:
	snip.rv="\\frac{{d^{{{exp}}}{nom}}}{{d {{{den}}}^{{{exp}}}}}".format(nom=match.group(1), den=match.group(3), exp=match.group(2))
`
endsnippet

priority 80
context math()
snippet "pardif" "differential" ri
\frac{\partial $1}{\partial $2}$0
endsnippet

priority 70
context math()
snippet "dif" "differential" ri
\frac{d$1}{d$2}$0
endsnippet



# Parentheses
context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

# Bars
priority 10
snippet "(?<![a-zA-Z])bar" "bar" rwA
\overline{$1}
endsnippet

# Bars on letters
priority 100
snippet "(?<!\\)([a-zA-Z])bar" "bar" irA
`!p
if match.group(1) == 'h':
	snip.rv="\hbar"
else:
	snip.rv="\overline{{{:s}}}".format(match.group(1))
`
endsnippet

priority 10
context math()
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context math()
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context math()
snippet "[^\\]pi" "pi" wrA
\pi
endsnippet

# bold letter
priority 110
snippet "(\\[a-zA-Z]+)(fat|bold)" "fat/bold text" riA
`!p
snip.rv="\\bm{{{:s}}}".format(match.group(1))
`
endsnippet

# bold letter
priority 100
snippet "([a-zA-Z])(fat|bold)" "fat/bold text" riA
`!p
snip.rv="\\bm{{{:s}}}".format(match.group(1))
`
endsnippet

# Vectors
priority 100
snippet "(\\?\w+)(,\.|\.,)" "bar" riA
`!p
snip.rv="\\vec{{{:s}}}".format(match.group(1))
`
endsnippet

# Blackboard bold
priority 100
snippet "([a-zA-Z])bb" "blackboard bold" riA
`!p
snip.rv="\\mathbb{{{:s}}}".format(match.group(1))
`
endsnippet

snippet abs "Absolute value" wA
\lvert $1 \rvert
endsnippet

# Matrices
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

# Dirac notation
context math()
snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context math()
snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context math()
snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context math()
snippet hamiltonian1D "Hamilonian in 1D" w
- \frac{\hbar^2}{2m} \frac{d^2 ${1:\psi}}{dx^2}
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet
